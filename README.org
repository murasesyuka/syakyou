
* reading the Programing Coq

  [[http://www.iij-ii.co.jp/lab/techdoc/coqt/][Programing Coq]]

** Coqを始めよう

   
*** Eval compute in

    "View -> Show Query Pane" or Esc

*** はじめての証明

    Q. TypeとPropの違いは？

** Proof-editing mode であそぼう

*** proof-editing mode での証明

**** 証明してみる(1)

     A. := の後は定義
     A. 型の後に定義を書かずに"."を書くことでproof-editing mode

**** Definition 以外のコマンド

     "Templates -> *"

**** 証明してみる(2)

     P. forall (P Q : Prop), (forall P : Prop, (P -> Q) -> Q) -> ((P -> Q) -> P) ->  P

     Q. "apply H0"しろと言うが、applyとは何者ぞ？
     Q. 証明完了らしいが意味不明だ！

     A. subgoalを後ろからapplyしていくっぽい

**** not、or、and の定義と証明
***** not
      
      ?. unfold not.しても、coq8.4pl4ではsubgoalに変化無し
      
***** or
      
      Q. apply or_introl.で、Error: Impossible to unify "or ?197 ?198" with "Q \/ P".

***** and

      Q. destruct H. left.は駄目なのね
      Q. apply conj.で、Error: Impossible to unify "and ?208 ?209" with "Q /\ P".

**** tactics

***** 仮定に以下の H があるとき

| H : forall X, A -> B | (サブゴールが B なら)  apply H, apply (H ○○○) |
| H : ~ A              | (サブゴールが False なら) apply H                |
| H : A \/ B           | case H, destruct H                               |
| H : A /\ B           | case H, destruct H                               |
|                      |                                                  |

***** サブゴールが○○○のとき

| forall X, A | intro, intros                                 |
| A -> B      | intro, intros                                 |
| ~ A         | intro                                         |
| A \/ B      | left(apply or_introl), right(apply or_intror) |
| A /\ B      | split(apply conj)                             |

***** その他

| 関数を定義の形に展開する | unfold      |
| 自動証明                 | auto, tauto |


*** 練習問題と前回の答え

    !. 問3、4はcoqideの助けで解けたが、問5は答え見たが意味不明＞＜、

    ?. problem0 は flip ($)だそうだが、Haskellで$は（なんか見たこと有るが）どう使う？

** リストを扱う

*** リストの定義

    | 関数の定義     | Definition |
    | 再帰関数の定義 | Fixpoint   | 

    !. Fixpoint app コンパイルエラー
    
    #+BEGIN_SRC
    Error:
    In environment
    app : forall A : Type, list A -> list A -> list A
    A : Type
    l : list A
    l' : list A
    x : A
    xs : list A
    The term "x" has type "A" while it is expected to have type "Type".
    #+END_SRC

    A. "cons A x (...)"にしたら通った。templateみたくテンプレート引数が必要なのか？新しいcoqは推論してくれない？

*** リストの構造に関する帰納法

    Note. 使用するので、Require Import List. しておくこと

*** app_nil_r の証明

    [[coq3_2_app_nil_r.v]]

    Q. (左のテキストボックス)Show (右のテキストボックス)2 ってどうするの???
    A. 意味分かった、出来た

    !. "++ の定義から..."っていつ定義されたねん
    A. appの定義のことね

*** app の性質の証明

    Q. inductionは、app > matchの両条件をそれぞれ満たすことよう分岐させる機能なの？
    
*** rev の性質

    !. Fixpoint app同様に、rev *A* xs とAの型引数渡した
    A. Require Import List. の標準は大丈夫な模様。自前定義の奴は型推論の記載が必要！？
    
*** タクティクまとめと帰納法を使った証明のテクニック

    | induction x  | x について帰納法で証明を進める                                       |
    | simpl        | サブゴールを簡約する                                                 |
    | reflexivity  | サブゴールが等式の形で、両辺の値が等しいとき                         |
    | f_equal      | apply (f_equal x) のようなもの、x は省略できる                       |
    | rewrite x    | x の型が "forall 〜, a = b" のとき、サブゴールの a を b で書き換える |
    | rewrite <- x | x の型が "forall 〜, a = b" のとき、サブゴールの b を a で書き換える |

*** 演習
    
    Q. reflexivity.とはなにモノぞ
    A. 反射性

    Q. rewrite rev_app_distr.とは、、、
    A. 
