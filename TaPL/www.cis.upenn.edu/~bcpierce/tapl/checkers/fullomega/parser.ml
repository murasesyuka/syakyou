type token =
  | TYPE of (Support.Error.info)
  | INERT of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | REF of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | RREF of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | ALL of (Support.Error.info)
  | NAT of (Support.Error.info)
  | SOME of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | AS of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
let rec addbinders tyT l = match l with
   [] -> tyT
 | (tyX,k)::rest -> TyAbs(tyX, k, addbinders tyT rest)
# 82 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* TYPE *);
  258 (* INERT *);
  259 (* LAMBDA *);
  260 (* USTRING *);
  261 (* UNIT *);
  262 (* REF *);
  263 (* UUNIT *);
  264 (* RREF *);
  265 (* TIMESFLOAT *);
  266 (* IF *);
  267 (* THEN *);
  268 (* ELSE *);
  269 (* TRUE *);
  270 (* FALSE *);
  271 (* BOOL *);
  272 (* SUCC *);
  273 (* PRED *);
  274 (* ISZERO *);
  275 (* UFLOAT *);
  276 (* FIX *);
  277 (* LETREC *);
  278 (* ALL *);
  279 (* NAT *);
  280 (* SOME *);
  281 (* LET *);
  282 (* IN *);
  283 (* AS *);
  284 (* UCID *);
  285 (* LCID *);
  286 (* INTV *);
  287 (* FLOATV *);
  288 (* STRINGV *);
  289 (* APOSTROPHE *);
  290 (* DQUOTE *);
  291 (* ARROW *);
  292 (* BANG *);
  293 (* BARGT *);
  294 (* BARRCURLY *);
  295 (* BARRSQUARE *);
  296 (* COLON *);
  297 (* COLONCOLON *);
  298 (* COLONEQ *);
  299 (* COLONHASH *);
  300 (* COMMA *);
  301 (* DARROW *);
  302 (* DDARROW *);
  303 (* DOT *);
    0 (* EOF *);
  304 (* EQ *);
  305 (* EQEQ *);
  306 (* EXISTS *);
  307 (* GT *);
  308 (* HASH *);
  309 (* LCURLY *);
  310 (* LCURLYBAR *);
  311 (* LEFTARROW *);
  312 (* LPAREN *);
  313 (* LSQUARE *);
  314 (* LSQUAREBAR *);
  315 (* LT *);
  316 (* RCURLY *);
  317 (* RPAREN *);
  318 (* RSQUARE *);
  319 (* SEMI *);
  320 (* SLASH *);
  321 (* STAR *);
  322 (* TRIANGLE *);
  323 (* USCORE *);
  324 (* VBAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\005\000\005\000\
\007\000\007\000\009\000\011\000\011\000\011\000\012\000\012\000\
\010\000\010\000\006\000\006\000\006\000\006\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\014\000\
\014\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\013\000\013\000\016\000\016\000\020\000\020\000\021\000\021\000\
\022\000\022\000\017\000\017\000\023\000\023\000\024\000\024\000\
\018\000\018\000\025\000\025\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\001\000\003\000\001\000\002\000\002\000\007\000\002\000\002\000\
\003\000\001\000\001\000\003\000\003\000\001\000\001\000\003\000\
\003\000\001\000\001\000\002\000\005\000\005\000\003\000\001\000\
\001\000\001\000\003\000\001\000\001\000\001\000\007\000\003\000\
\001\000\001\000\006\000\006\000\003\000\006\000\006\000\006\000\
\008\000\005\000\010\000\001\000\002\000\002\000\002\000\003\000\
\002\000\002\000\002\000\002\000\004\000\003\000\004\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\001\000\008\000\
\001\000\003\000\000\000\002\000\000\000\001\000\001\000\003\000\
\003\000\001\000\000\000\001\000\001\000\003\000\003\000\001\000\
\002\000\001\000\000\000\003\000\000\000\002\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\059\000\000\000\000\000\000\000\
\061\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\063\000\060\000\058\000\000\000\001\000\000\000\
\000\000\088\000\000\000\003\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\056\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\
\000\000\000\000\000\000\000\000\074\000\000\000\070\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\026\000\000\000\028\000\029\000\000\000\030\000\
\024\000\000\000\000\000\000\000\019\000\082\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\086\000\011\000\000\000\000\000\
\007\000\008\000\000\000\000\000\000\000\057\000\000\000\000\000\
\054\000\002\000\009\000\012\000\013\000\000\000\000\000\000\000\
\020\000\000\000\000\000\000\000\080\000\000\000\076\000\000\000\
\000\000\055\000\000\000\081\000\068\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\084\000\000\000\000\000\
\087\000\000\000\073\000\000\000\072\000\016\000\053\000\000\000\
\000\000\000\000\000\000\027\000\000\000\023\000\032\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\017\000\000\000\000\000\000\000\000\000\000\000\079\000\078\000\
\035\000\036\000\040\000\000\000\038\000\000\000\039\000\000\000\
\000\000\022\000\021\000\000\000\000\000\000\000\006\000\000\000\
\000\000\041\000\000\000\064\000\031\000\000\000\043\000"

let yydgoto = "\002\000\
\026\000\027\000\061\000\052\000\056\000\125\000\029\000\030\000\
\101\000\102\000\031\000\066\000\103\000\085\000\086\000\089\000\
\126\000\087\000\032\000\062\000\063\000\064\000\127\000\128\000\
\053\000"

let yysindex = "\008\000\
\001\000\000\000\210\254\231\254\000\000\102\002\102\002\009\002\
\000\000\000\000\102\002\102\002\102\002\102\002\248\254\233\254\
\242\254\013\255\000\000\000\000\000\000\102\002\000\000\189\255\
\009\002\000\000\219\254\000\000\000\000\012\255\252\254\020\255\
\082\255\022\255\025\255\035\255\000\000\042\000\252\254\199\255\
\067\255\252\254\252\254\252\254\252\254\042\255\043\255\065\255\
\052\255\022\255\255\254\000\000\055\255\082\255\009\002\000\000\
\252\254\064\255\061\255\082\255\000\000\053\255\000\000\071\255\
\054\255\057\255\001\000\082\255\040\255\082\002\082\255\252\254\
\093\255\000\000\000\000\228\255\000\000\000\000\094\255\000\000\
\000\000\121\002\082\255\068\255\000\000\000\000\161\002\255\254\
\084\255\082\255\082\255\252\254\009\002\082\255\009\002\079\255\
\009\002\101\255\255\254\000\000\000\000\000\000\089\255\082\255\
\000\000\000\000\112\255\009\002\098\255\000\000\050\002\009\002\
\000\000\000\000\000\000\000\000\000\000\027\255\086\255\022\255\
\000\000\022\255\123\255\113\255\000\000\092\255\000\000\110\255\
\096\255\000\000\228\255\000\000\000\000\009\002\108\255\121\255\
\147\255\124\255\150\255\144\255\152\255\000\000\118\255\255\254\
\000\000\120\255\000\000\009\002\000\000\000\000\000\000\134\255\
\135\255\022\255\082\255\000\000\144\002\000\000\000\000\000\000\
\009\002\009\002\009\002\009\002\009\002\125\255\009\002\000\000\
\000\000\136\255\126\255\082\255\082\255\143\255\000\000\000\000\
\000\000\000\000\000\000\164\255\000\000\145\255\000\000\009\002\
\169\255\000\000\000\000\082\255\009\002\009\002\000\000\082\255\
\140\255\000\000\182\255\000\000\000\000\009\002\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\216\254\181\001\000\000\000\000\000\000\000\000\000\000\151\255\
\000\000\000\000\000\000\000\000\000\000\097\000\114\255\076\255\
\000\000\168\255\000\000\000\000\000\000\151\255\150\000\000\000\
\000\000\186\000\222\000\002\001\038\001\000\000\000\000\000\000\
\000\000\243\254\000\000\000\000\000\000\000\000\000\000\000\000\
\074\001\000\000\216\001\000\000\000\000\000\000\000\000\156\255\
\161\255\000\000\000\000\000\000\000\000\000\000\000\000\110\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\163\255\000\000\000\000\000\000\000\000\074\000\000\000\
\000\000\000\000\000\000\146\001\000\000\000\000\000\000\000\000\
\000\000\176\255\000\000\000\000\000\000\000\000\051\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\160\000\000\000\168\255\
\000\000\168\255\000\000\000\000\000\000\000\000\000\000\166\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\183\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\166\000\000\000\255\255\000\000\000\000\233\255\000\000\000\000\
\173\255\090\000\006\000\124\000\000\000\106\000\216\255\208\255\
\000\000\000\000\168\000\000\000\128\000\000\000\083\000\000\000\
\143\000"

let yytablesize = 985
let yytable = "\028\000\
\023\000\098\000\034\000\035\000\133\000\047\000\041\000\083\000\
\001\000\084\000\033\000\039\000\040\000\050\000\067\000\143\000\
\042\000\043\000\044\000\045\000\046\000\003\000\085\000\065\000\
\005\000\067\000\051\000\057\000\003\000\048\000\105\000\005\000\
\009\000\010\000\067\000\121\000\109\000\072\000\068\000\009\000\
\010\000\036\000\069\000\049\000\115\000\092\000\132\000\119\000\
\037\000\019\000\020\000\021\000\054\000\106\000\099\000\037\000\
\019\000\020\000\021\000\129\000\055\000\070\000\088\000\100\000\
\090\000\028\000\135\000\136\000\116\000\117\000\138\000\152\000\
\038\000\153\000\091\000\025\000\071\000\093\000\018\000\038\000\
\145\000\094\000\025\000\071\000\073\000\074\000\034\000\034\000\
\075\000\076\000\095\000\137\000\096\000\139\000\018\000\141\000\
\077\000\018\000\018\000\097\000\078\000\034\000\104\000\079\000\
\080\000\174\000\147\000\107\000\108\000\081\000\065\000\018\000\
\110\000\018\000\111\000\044\000\112\000\113\000\044\000\034\000\
\120\000\122\000\140\000\072\000\044\000\044\000\044\000\044\000\
\050\000\130\000\134\000\175\000\160\000\144\000\082\000\034\000\
\034\000\083\000\034\000\044\000\146\000\148\000\044\000\044\000\
\044\000\044\000\171\000\151\000\186\000\187\000\154\000\156\000\
\155\000\157\000\161\000\044\000\158\000\044\000\163\000\177\000\
\178\000\179\000\180\000\181\000\193\000\183\000\044\000\162\000\
\196\000\044\000\044\000\164\000\166\000\044\000\044\000\165\000\
\044\000\167\000\168\000\170\000\172\000\173\000\191\000\184\000\
\182\000\185\000\188\000\194\000\195\000\189\000\003\000\004\000\
\190\000\005\000\006\000\192\000\199\000\007\000\008\000\197\000\
\003\000\009\000\010\000\005\000\011\000\012\000\013\000\198\000\
\014\000\015\000\069\000\009\000\010\000\016\000\067\000\071\000\
\058\000\059\000\019\000\020\000\021\000\015\000\075\000\083\000\
\022\000\077\000\067\000\037\000\019\000\020\000\021\000\074\000\
\114\000\169\000\075\000\150\000\159\000\118\000\149\000\176\000\
\142\000\038\000\077\000\000\000\025\000\069\000\078\000\000\000\
\000\000\000\000\080\000\038\000\000\000\060\000\025\000\081\000\
\000\000\000\000\003\000\004\000\000\000\005\000\006\000\000\000\
\000\000\007\000\008\000\000\000\000\000\009\000\010\000\000\000\
\011\000\012\000\013\000\000\000\014\000\015\000\000\000\000\000\
\082\000\016\000\000\000\083\000\017\000\018\000\019\000\020\000\
\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\004\000\000\000\005\000\006\000\
\000\000\000\000\007\000\008\000\000\000\024\000\009\000\010\000\
\025\000\011\000\012\000\013\000\000\000\014\000\015\000\000\000\
\000\000\000\000\016\000\000\000\000\000\000\000\059\000\019\000\
\020\000\021\000\000\000\033\000\000\000\022\000\033\000\000\000\
\000\000\000\000\000\000\000\000\033\000\033\000\033\000\033\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\000\000\
\000\000\025\000\010\000\033\000\033\000\010\000\033\000\033\000\
\033\000\033\000\060\000\010\000\010\000\010\000\010\000\000\000\
\000\000\000\000\000\000\033\000\000\000\033\000\000\000\000\000\
\033\000\033\000\010\000\000\000\000\000\010\000\010\000\010\000\
\010\000\000\000\033\000\000\000\000\000\033\000\033\000\033\000\
\033\000\000\000\010\000\000\000\010\000\000\000\000\000\010\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\046\000\
\010\000\010\000\046\000\000\000\010\000\010\000\000\000\010\000\
\046\000\046\000\046\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\037\000\000\000\000\000\000\000\046\000\
\000\000\000\000\046\000\046\000\046\000\046\000\000\000\000\000\
\000\000\037\000\000\000\049\000\000\000\000\000\049\000\046\000\
\000\000\046\000\000\000\000\000\049\000\049\000\049\000\049\000\
\000\000\000\000\046\000\037\000\000\000\046\000\046\000\000\000\
\000\000\046\000\046\000\049\000\046\000\000\000\049\000\049\000\
\049\000\049\000\000\000\037\000\037\000\000\000\037\000\050\000\
\000\000\000\000\050\000\049\000\000\000\049\000\000\000\000\000\
\050\000\050\000\050\000\050\000\000\000\000\000\049\000\000\000\
\000\000\049\000\049\000\000\000\000\000\049\000\049\000\050\000\
\049\000\000\000\050\000\050\000\050\000\050\000\000\000\000\000\
\000\000\000\000\000\000\051\000\000\000\000\000\051\000\050\000\
\000\000\050\000\000\000\000\000\051\000\051\000\051\000\051\000\
\000\000\000\000\050\000\000\000\000\000\050\000\050\000\000\000\
\000\000\050\000\050\000\051\000\050\000\000\000\051\000\051\000\
\051\000\051\000\000\000\000\000\000\000\000\000\000\000\052\000\
\000\000\000\000\052\000\051\000\000\000\051\000\000\000\000\000\
\052\000\052\000\052\000\052\000\000\000\000\000\051\000\000\000\
\000\000\051\000\051\000\000\000\000\000\051\000\051\000\052\000\
\051\000\000\000\052\000\052\000\052\000\052\000\000\000\000\000\
\000\000\000\000\000\000\047\000\000\000\000\000\047\000\052\000\
\000\000\052\000\000\000\000\000\047\000\047\000\047\000\047\000\
\000\000\000\000\052\000\000\000\000\000\052\000\052\000\000\000\
\000\000\052\000\052\000\047\000\052\000\000\000\047\000\047\000\
\047\000\047\000\000\000\000\000\000\000\000\000\000\000\045\000\
\000\000\000\000\045\000\047\000\000\000\047\000\000\000\000\000\
\045\000\045\000\045\000\045\000\000\000\000\000\047\000\000\000\
\000\000\047\000\047\000\000\000\000\000\047\000\047\000\045\000\
\047\000\000\000\045\000\045\000\045\000\045\000\000\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\048\000\045\000\
\000\000\045\000\000\000\000\000\048\000\048\000\048\000\048\000\
\000\000\000\000\045\000\000\000\000\000\045\000\045\000\000\000\
\000\000\045\000\045\000\048\000\045\000\000\000\048\000\048\000\
\048\000\048\000\000\000\000\000\000\000\000\000\056\000\000\000\
\000\000\056\000\000\000\048\000\000\000\048\000\000\000\000\000\
\000\000\056\000\056\000\000\000\000\000\000\000\048\000\000\000\
\000\000\048\000\048\000\000\000\000\000\048\000\048\000\056\000\
\048\000\056\000\056\000\056\000\056\000\000\000\000\000\000\000\
\000\000\056\000\000\000\000\000\056\000\000\000\056\000\000\000\
\000\000\000\000\000\000\056\000\056\000\056\000\000\000\000\000\
\000\000\056\000\000\000\000\000\056\000\056\000\000\000\000\000\
\000\000\000\000\056\000\056\000\056\000\056\000\056\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\000\000\056\000\000\000\000\000\056\000\000\000\
\000\000\000\000\003\000\004\000\056\000\005\000\006\000\056\000\
\056\000\007\000\008\000\056\000\000\000\009\000\010\000\000\000\
\011\000\012\000\013\000\000\000\014\000\015\000\000\000\000\000\
\000\000\016\000\000\000\000\000\000\000\037\000\019\000\020\000\
\021\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\004\000\000\000\005\000\006\000\
\000\000\000\000\007\000\008\000\000\000\038\000\009\000\010\000\
\025\000\011\000\012\000\013\000\000\000\014\000\015\000\000\000\
\000\000\000\000\016\000\000\000\000\000\000\000\059\000\019\000\
\020\000\021\000\000\000\003\000\000\000\022\000\005\000\006\000\
\000\000\000\000\007\000\000\000\000\000\000\000\009\000\010\000\
\000\000\011\000\012\000\013\000\000\000\014\000\038\000\003\000\
\000\000\025\000\005\000\000\000\000\000\000\000\037\000\019\000\
\020\000\021\000\009\000\010\000\000\000\022\000\000\000\000\000\
\000\000\000\000\000\000\073\000\074\000\000\000\000\000\075\000\
\076\000\000\000\037\000\019\000\020\000\021\000\038\000\077\000\
\000\000\025\000\000\000\078\000\000\000\000\000\079\000\080\000\
\123\000\000\000\073\000\074\000\081\000\124\000\075\000\076\000\
\000\000\000\000\038\000\000\000\000\000\025\000\077\000\000\000\
\000\000\000\000\078\000\000\000\074\000\079\000\080\000\075\000\
\000\000\000\000\000\000\081\000\124\000\082\000\000\000\077\000\
\083\000\000\000\000\000\078\000\000\000\000\000\000\000\080\000\
\000\000\000\000\000\000\000\000\081\000\000\000\000\000\000\000\
\000\000\000\000\000\000\131\000\082\000\000\000\000\000\083\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\082\000\000\000\000\000\
\083\000"

let yycheck = "\001\000\
\000\000\050\000\028\001\029\001\088\000\029\001\008\000\048\001\
\001\000\033\000\057\001\006\000\007\000\028\001\028\001\099\000\
\011\000\012\000\013\000\014\000\029\001\002\001\063\001\025\000\
\005\001\063\001\041\001\022\000\002\001\053\001\054\000\005\001\
\013\001\014\001\048\001\076\000\060\000\032\000\027\001\013\001\
\014\001\067\001\047\001\067\001\068\000\040\000\087\000\071\000\
\029\001\030\001\031\001\032\001\040\001\055\000\056\001\029\001\
\030\001\031\001\032\001\083\000\048\001\042\001\041\001\065\001\
\040\001\067\000\090\000\091\000\029\001\030\001\094\000\120\000\
\053\001\122\000\040\001\056\001\057\001\011\001\028\001\053\001\
\104\000\040\001\056\001\057\001\003\001\004\001\011\001\012\001\
\007\001\008\001\048\001\093\000\028\001\095\000\044\001\097\000\
\015\001\047\001\048\001\048\001\019\001\026\001\048\001\022\001\
\023\001\154\000\108\000\044\001\048\001\028\001\112\000\061\001\
\060\001\063\001\044\001\002\001\063\001\061\001\005\001\044\001\
\028\001\028\001\044\001\118\000\011\001\012\001\013\001\014\001\
\028\001\062\001\047\001\155\000\134\000\045\001\053\001\060\001\
\061\001\056\001\063\001\026\001\029\001\044\001\029\001\030\001\
\031\001\032\001\148\000\062\001\172\000\173\000\028\001\060\001\
\040\001\044\001\047\001\042\001\061\001\044\001\012\001\161\000\
\162\000\163\000\164\000\165\000\188\000\167\000\053\001\047\001\
\192\000\056\001\057\001\048\001\029\001\060\001\061\001\026\001\
\063\001\026\001\061\001\060\001\047\001\047\001\184\000\048\001\
\060\001\060\001\044\001\189\000\190\000\026\001\002\001\003\001\
\048\001\005\001\006\001\027\001\198\000\009\001\010\001\060\001\
\002\001\013\001\014\001\005\001\016\001\017\001\018\001\026\001\
\020\001\021\001\060\001\013\001\014\001\025\001\047\001\060\001\
\028\001\029\001\030\001\031\001\032\001\061\001\060\001\048\001\
\036\001\060\001\044\001\029\001\030\001\031\001\032\001\004\001\
\067\000\144\000\007\001\112\000\131\000\070\000\111\000\157\000\
\098\000\053\001\015\001\255\255\056\001\047\001\019\001\255\255\
\255\255\255\255\023\001\053\001\255\255\065\001\056\001\028\001\
\255\255\255\255\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\009\001\010\001\255\255\255\255\013\001\014\001\255\255\
\016\001\017\001\018\001\255\255\020\001\021\001\255\255\255\255\
\053\001\025\001\255\255\056\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\036\001\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\003\001\255\255\005\001\006\001\
\255\255\255\255\009\001\010\001\255\255\053\001\013\001\014\001\
\056\001\016\001\017\001\018\001\255\255\020\001\021\001\255\255\
\255\255\255\255\025\001\255\255\255\255\255\255\029\001\030\001\
\031\001\032\001\255\255\002\001\255\255\036\001\005\001\255\255\
\255\255\255\255\255\255\255\255\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\053\001\255\255\
\255\255\056\001\002\001\026\001\027\001\005\001\029\001\030\001\
\031\001\032\001\065\001\011\001\012\001\013\001\014\001\255\255\
\255\255\255\255\255\255\042\001\255\255\044\001\255\255\255\255\
\047\001\048\001\026\001\255\255\255\255\029\001\030\001\031\001\
\032\001\255\255\057\001\255\255\255\255\060\001\061\001\062\001\
\063\001\255\255\042\001\255\255\044\001\255\255\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\002\001\
\056\001\057\001\005\001\255\255\060\001\061\001\255\255\063\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\011\001\012\001\255\255\255\255\255\255\026\001\
\255\255\255\255\029\001\030\001\031\001\032\001\255\255\255\255\
\255\255\026\001\255\255\002\001\255\255\255\255\005\001\042\001\
\255\255\044\001\255\255\255\255\011\001\012\001\013\001\014\001\
\255\255\255\255\053\001\044\001\255\255\056\001\057\001\255\255\
\255\255\060\001\061\001\026\001\063\001\255\255\029\001\030\001\
\031\001\032\001\255\255\060\001\061\001\255\255\063\001\002\001\
\255\255\255\255\005\001\042\001\255\255\044\001\255\255\255\255\
\011\001\012\001\013\001\014\001\255\255\255\255\053\001\255\255\
\255\255\056\001\057\001\255\255\255\255\060\001\061\001\026\001\
\063\001\255\255\029\001\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\002\001\255\255\255\255\005\001\042\001\
\255\255\044\001\255\255\255\255\011\001\012\001\013\001\014\001\
\255\255\255\255\053\001\255\255\255\255\056\001\057\001\255\255\
\255\255\060\001\061\001\026\001\063\001\255\255\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\255\255\005\001\042\001\255\255\044\001\255\255\255\255\
\011\001\012\001\013\001\014\001\255\255\255\255\053\001\255\255\
\255\255\056\001\057\001\255\255\255\255\060\001\061\001\026\001\
\063\001\255\255\029\001\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\002\001\255\255\255\255\005\001\042\001\
\255\255\044\001\255\255\255\255\011\001\012\001\013\001\014\001\
\255\255\255\255\053\001\255\255\255\255\056\001\057\001\255\255\
\255\255\060\001\061\001\026\001\063\001\255\255\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\255\255\005\001\042\001\255\255\044\001\255\255\255\255\
\011\001\012\001\013\001\014\001\255\255\255\255\053\001\255\255\
\255\255\056\001\057\001\255\255\255\255\060\001\061\001\026\001\
\063\001\255\255\029\001\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\002\001\255\255\255\255\005\001\042\001\
\255\255\044\001\255\255\255\255\011\001\012\001\013\001\014\001\
\255\255\255\255\053\001\255\255\255\255\056\001\057\001\255\255\
\255\255\060\001\061\001\026\001\063\001\255\255\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\002\001\255\255\
\255\255\005\001\255\255\042\001\255\255\044\001\255\255\255\255\
\255\255\013\001\014\001\255\255\255\255\255\255\053\001\255\255\
\255\255\056\001\057\001\255\255\255\255\060\001\061\001\027\001\
\063\001\029\001\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\002\001\255\255\255\255\005\001\255\255\042\001\255\255\
\255\255\255\255\255\255\047\001\013\001\014\001\255\255\255\255\
\255\255\053\001\255\255\255\255\056\001\057\001\255\255\255\255\
\255\255\255\255\027\001\063\001\029\001\030\001\031\001\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\044\001\255\255\255\255\047\001\255\255\
\255\255\255\255\002\001\003\001\053\001\005\001\006\001\056\001\
\057\001\009\001\010\001\060\001\255\255\013\001\014\001\255\255\
\016\001\017\001\018\001\255\255\020\001\021\001\255\255\255\255\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\036\001\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\003\001\255\255\005\001\006\001\
\255\255\255\255\009\001\010\001\255\255\053\001\013\001\014\001\
\056\001\016\001\017\001\018\001\255\255\020\001\021\001\255\255\
\255\255\255\255\025\001\255\255\255\255\255\255\029\001\030\001\
\031\001\032\001\255\255\002\001\255\255\036\001\005\001\006\001\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\014\001\
\255\255\016\001\017\001\018\001\255\255\020\001\053\001\002\001\
\255\255\056\001\005\001\255\255\255\255\255\255\029\001\030\001\
\031\001\032\001\013\001\014\001\255\255\036\001\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\029\001\030\001\031\001\032\001\053\001\015\001\
\255\255\056\001\255\255\019\001\255\255\255\255\022\001\023\001\
\024\001\255\255\003\001\004\001\028\001\029\001\007\001\008\001\
\255\255\255\255\053\001\255\255\255\255\056\001\015\001\255\255\
\255\255\255\255\019\001\255\255\004\001\022\001\023\001\007\001\
\255\255\255\255\255\255\028\001\029\001\053\001\255\255\015\001\
\056\001\255\255\255\255\019\001\255\255\255\255\255\255\023\001\
\255\255\255\255\255\255\255\255\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\053\001\255\255\255\255\056\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\255\255\
\056\001"

let yynames_const = "\
  "

let yynames_block = "\
  TYPE\000\
  INERT\000\
  LAMBDA\000\
  USTRING\000\
  UNIT\000\
  REF\000\
  UUNIT\000\
  RREF\000\
  TIMESFLOAT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  UFLOAT\000\
  FIX\000\
  LETREC\000\
  ALL\000\
  NAT\000\
  SOME\000\
  LET\000\
  IN\000\
  AS\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 128 "parser.mly"
      ( fun ctx -> [],ctx )
# 612 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 130 "parser.mly"
      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 624 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 138 "parser.mly"
      ( fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx )
# 631 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 140 "parser.mly"
      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )
# 639 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 142 "parser.mly"
      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )
# 647 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 144 "parser.mly"
     ( fun ctx ->
         let ctx1 = addname ctx _2.v in
         let ctx2 = addname ctx1 _4.v in
         (SomeBind(_1,_2.v,_4.v,_7 ctx), ctx2) )
# 663 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 152 "parser.mly"
      ( fun ctx -> VarBind (_2 ctx))
# 671 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 154 "parser.mly"
      ( fun ctx -> TmAbbBind(_2 ctx, None) )
# 679 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 158 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 688 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 160 "parser.mly"
      ( _1 )
# 695 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowKind) in
    Obj.repr(
# 165 "parser.mly"
      ( _1 )
# 702 "parser.ml"
               : 'Kind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 169 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 712 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 172 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 722 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 175 "parser.mly"
      ( _1 )
# 729 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 179 "parser.mly"
      ( _1 )
# 736 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 181 "parser.mly"
      ( fun ctx ->
          TmApp(_2, TmAbs(_2, "_", TyUnit, _3 (addname ctx "_")), _1 ctx) )
# 746 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AKind) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowKind) in
    Obj.repr(
# 185 "parser.mly"
                            ( fun ctx -> KnArr(_1 ctx, _3 ctx) )
# 755 "parser.ml"
               : 'ArrowKind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AKind) in
    Obj.repr(
# 187 "parser.mly"
           ( _1 )
# 762 "parser.ml"
               : 'ArrowKind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 192 "parser.mly"
                ( _1 )
# 769 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 194 "parser.mly"
      ( fun ctx -> TyRef(_2 ctx) )
# 777 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'OKind) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 196 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TyAll(_2.v,_3 ctx,_5 ctx1) )
# 790 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'OKind) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 200 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TyAbs(_2.v, _3 ctx, _5 ctx1) )
# 803 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 207 "parser.mly"
           ( _2 )
# 812 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 209 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 823 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 215 "parser.mly"
      ( fun ctx -> TyString )
# 830 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 217 "parser.mly"
      ( fun ctx -> TyUnit )
# 837 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 219 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 847 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 222 "parser.mly"
      ( fun ctx -> TyBool )
# 854 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 224 "parser.mly"
      ( fun ctx -> TyFloat )
# 861 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 226 "parser.mly"
      ( fun ctx -> TyNat )
# 868 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'OKind) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 228 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _3.v in
          TySome(_3.v, _4 ctx, _6 ctx1) )
# 883 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 236 "parser.mly"
     ( fun ctx -> TyArr(_1 ctx, _3 ctx) )
# 892 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppType) in
    Obj.repr(
# 238 "parser.mly"
            ( _1 )
# 899 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 242 "parser.mly"
      ( _1 )
# 906 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 244 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _6 ctx1) )
# 920 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 248 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx1) )
# 934 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 252 "parser.mly"
      ( fun ctx -> TmAssign(_2, _1 ctx, _3 ctx) )
# 943 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 254 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 955 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 256 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 967 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 258 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 979 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 260 "parser.mly"
      ( fun ctx -> 
          let ctx1 = addname ctx _2.v in 
          TmLet(_1, _2.v, TmFix(_1, TmAbs(_1, _2.v, _4 ctx, _6 ctx1)),
                _8 ctx1) )
# 996 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'OKind) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 265 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmTAbs(_1,_2.v,_3 ctx,_5 ctx1) )
# 1009 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 269 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _3.v in
          let ctx2 = addname ctx1 _5.v in
          TmUnpack(_1,_3.v,_5.v,_8 ctx,_10 ctx2) )
# 1028 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 276 "parser.mly"
      ( _1 )
# 1035 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 278 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 1046 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 283 "parser.mly"
      ( fun ctx -> TmRef(_1, _2 ctx) )
# 1054 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 285 "parser.mly"
      ( fun ctx -> TmDeref(_1, _2 ctx) )
# 1062 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 287 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 1071 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 289 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 1079 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 291 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 1087 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 293 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 1095 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 295 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 1104 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 298 "parser.mly"
      ( fun ctx ->
          let t1 = _1 ctx in
          let t2 = _3 ctx in
          TmTApp(tmInfo t1,t1,t2) )
# 1117 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 306 "parser.mly"
      ( _2 )
# 1126 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 308 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1136 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 310 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1144 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 313 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1154 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 316 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1161 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 318 "parser.mly"
      ( fun ctx -> TmUnit(_1) )
# 1168 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 320 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1175 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 322 "parser.mly"
      ( fun ctx -> TmTrue(_1) )
# 1182 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 324 "parser.mly"
      ( fun ctx -> TmFalse(_1) )
# 1189 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 326 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1200 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 332 "parser.mly"
      ( fun ctx ->
          TmPack(_1,_3 ctx,_5 ctx,_8 ctx) )
# 1215 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 336 "parser.mly"
         ( fun ctx -> KnStar )
# 1222 "parser.ml"
               : 'AKind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Kind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 337 "parser.mly"
                        ( _2 )
# 1231 "parser.ml"
               : 'AKind))
; (fun __caml_parser_env ->
    Obj.repr(
# 341 "parser.mly"
     ( fun ctx -> KnStar)
# 1237 "parser.ml"
               : 'OKind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Kind) in
    Obj.repr(
# 343 "parser.mly"
     ( _2 )
# 1245 "parser.ml"
               : 'OKind))
; (fun __caml_parser_env ->
    Obj.repr(
# 347 "parser.mly"
      ( fun ctx i -> [] )
# 1251 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 349 "parser.mly"
      ( _1 )
# 1258 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 353 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1265 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 355 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1274 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 359 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1283 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 361 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1290 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    Obj.repr(
# 365 "parser.mly"
      ( fun ctx i -> [] )
# 1296 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 367 "parser.mly"
      ( _1 )
# 1303 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 371 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1310 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 373 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1319 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 377 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1328 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 379 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1335 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppType) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 382 "parser.mly"
                  ( fun ctx -> TyApp(_1 ctx,_2 ctx) )
# 1343 "parser.ml"
               : 'AppType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 383 "parser.mly"
          ( _1 )
# 1350 "parser.ml"
               : 'AppType))
; (fun __caml_parser_env ->
    Obj.repr(
# 388 "parser.mly"
      ( fun b ctx -> (b, ctx) )
# 1356 "parser.ml"
               : 'TyAbbArgs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'OKind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TyAbbArgs) in
    Obj.repr(
# 390 "parser.mly"
      ( fun b ctx ->
          let ctx' = (addname ctx _1.v) in
          _3 (b@[(_1.v,_2 ctx)]) ctx' )
# 1367 "parser.ml"
               : 'TyAbbArgs))
; (fun __caml_parser_env ->
    Obj.repr(
# 396 "parser.mly"
      ( fun ctx -> TyVarBind(KnStar) )
# 1373 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Kind) in
    Obj.repr(
# 398 "parser.mly"
      ( fun ctx -> TyVarBind(_2 ctx) )
# 1381 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'TyAbbArgs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 400 "parser.mly"
      ( fun ctx ->
          let (b,ctx') = _1 [] ctx in
          TyAbbBind(addbinders (_3 ctx') b, None) )
# 1392 "parser.ml"
               : 'TyBinder))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )
